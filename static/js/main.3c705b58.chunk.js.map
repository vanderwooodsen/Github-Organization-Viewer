{"version":3,"sources":["features/githubViewer/githubViewerSlice.js","features/githubViewer/Commit.js","features/githubViewer/Commits.js","features/githubViewer/Repository.js","features/githubViewer/Repositories.js","features/githubViewer/Loading.js","features/githubViewer/LoadingError.js","features/githubViewer/GithubViewer.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["loadCommits","octokit","org","repo","page","a","rest","repos","listCommits","owner","per_page","result","data","getOctokit","state","token","githubViewer","accessToken","Octokit","auth","setCurrentRepository","createAsyncThunk","repository","thunkApi","getState","organization","login","commits","setOrganization","orgs","get","orgData","paginate","listForOrg","type","orgRepos","sort","b","stargazers_count","firstRepo","name","loadNextCommits","param","currentRepository","commitsPage","nextCommits","concat","githubViewerSlice","createSlice","initialState","repositories","loading","loadingError","reducers","setAccessToken","action","payload","extraReducers","pending","rejected","fulfilled","actions","selectCurrentRepository","selectRepositories","selectCommits","selectOrganization","selectLoading","selectLoadingError","Commit","props","commit","title","message","end","indexOf","substring","className","committer","format","date","sha","Commits","useSelector","dispatch","useDispatch","map","onClick","Repository","description","language","forks","created_at","Repositories","id","Loading","LoadingError","GithubViewer","useState","orgInput","setOrgInput","tokenInput","setTokenInput","useEffect","href","onSubmit","event","preventDefault","placeholder","value","onChange","target","App","store","configureStore","reducer","githubViewerReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3c705b58.chunk.js","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { Octokit } from \"octokit\";\n\nconst initialState = {\n  repository: \"Christi\",\n  repositories: [],\n  commits: null,\n  organization: null,\n  accessToken: \"\",\n  currentRepository: \"\",\n  commitsPage: 1,\n  loading: false,\n  loadingError: null\n};\n\nasync function loadCommits(octokit, org, repo, page) {\n  let result = await octokit.rest.repos.listCommits({\n    owner: org,\n    repo: repo,\n    per_page: 5,\n    page: page\n  });\n\n  return result.data;\n}\n\nfunction getOctokit(state) {\n  const token = state.githubViewer.accessToken;\n\n  if (token !== \"\") {\n    return new Octokit({ auth: token});\n  }\n\n  return new Octokit();\n}\n\nexport const setCurrentRepository = createAsyncThunk(\n  'currentRepository/set',\n  async function(repository, thunkApi) {\n    const state = thunkApi.getState();\n    const octokit = getOctokit(state);\n\n    const organization = state.githubViewer.organization.login;\n\n    return {\n      commits: await loadCommits(octokit, organization, repository, 0),\n      repository: repository,\n    }\n});\n\n\nexport const setOrganization = createAsyncThunk(\n  'organization/set',\n  async (organization, thunkApi) => {\n    const state = thunkApi.getState();\n    const octokit = getOctokit(state);\n\n    const orgData = await octokit.rest.orgs.get({org: organization});\n\n    let orgRepos = await octokit.paginate(\n      octokit.rest.repos.listForOrg, {\n        org: organization,\n        type: \"public\",\n        per_page: 100,\n    });\n\n    orgRepos = orgRepos.sort((a, b) => b.stargazers_count - a.stargazers_count);\n    let firstRepo = orgRepos[0].name;\n\n    return {\n      orgData: orgData.data,\n      repos: orgRepos,\n      repository: firstRepo,\n      commits: await loadCommits(octokit, organization, firstRepo, 0)\n    }\n  }\n);\n\nexport const loadNextCommits = createAsyncThunk(\n  'commits/load',\n  async function(param, thunkApi) {\n    const state = thunkApi.getState();\n    const octokit = getOctokit(state);\n\n    const organization = state.githubViewer.organization.login;\n    const currentRepository = state.githubViewer.currentRepository;\n    const commitsPage = state.githubViewer.commitsPage;\n\n    const nextCommits = await loadCommits(octokit, organization, currentRepository, commitsPage + 1);\n    const commits = state.githubViewer.commits.concat(nextCommits);\n    return {\n      commits: commits,\n      page: commitsPage + 1\n    }\n});\n\nexport const githubViewerSlice = createSlice({\n  name: 'githubViewer',\n  initialState,\n  reducers: {\n    setAccessToken: (state, action) => {\n      state.accessToken = action.payload;\n    },\n  },\n  extraReducers: {\n    [setOrganization.pending]: (state, action) => {\n      state.loading = true;\n      state.loadingError = null;\n    },\n    [setCurrentRepository.pending]: (state, action) => {\n      state.loading = true;\n      state.loadingError = null;\n    },\n    [loadNextCommits.pending]: (state, action) => {\n      state.loading = true;\n      state.loadingError = null;\n    },\n\n    [setOrganization.rejected]: (state, action) => {\n      state.loading = false;\n      state.loadingError = action.payload;\n    },\n    [setCurrentRepository.rejected]: (state, action) => {\n      state.loading = false;\n      state.loadingError = action.payload;\n    },\n    [loadNextCommits.rejected]: (state, action) => {\n      state.loading = false;\n      state.loadingError = action.payload;\n    },\n\n    [setOrganization.fulfilled] : (state, action) => {\n      state.repositories = action.payload.repos;\n      state.organization = action.payload.orgData;\n      state.currentRepository = action.payload.repository;\n      state.commits = action.payload.commits;\n      state.commitsPage = 1;\n      state.loading = false;\n      state.loadingError = null;\n    },\n\n    [setCurrentRepository.fulfilled] : (state, action) => {\n      state.commits = action.payload.commits;\n      state.currentRepository = action.payload.repository;\n      state.commitsPage = 1;\n      state.loading = false;\n      state.loadingError = null;\n    },\n\n    [loadNextCommits.fulfilled] : (state, action) => {\n      state.commits = action.payload.commits;\n      state.commitsPage = action.payload.page;\n      state.loading = false;\n      state.loadingError = null;\n    }\n  }\n\n});\n\nexport const { setAccessToken } = githubViewerSlice.actions;\n\nexport const selectCurrentRepository = (state) => state.githubViewer.currentRepository;\nexport const selectRepositories = (state) => state.githubViewer.repositories;\nexport const selectCommits = (state) => state.githubViewer.commits;\nexport const selectOrganization = (state) => state.githubViewer.organization;\nexport const selectLoading = (state) => state.githubViewer.loading;\nexport const selectLoadingError = (state) => state.githubViewer.loadingError;\nexport const selectAccessToken = (state) => state.githubViewer.accessToken;\n\nexport default githubViewerSlice.reducer;\n\n","import Moment from \"react-moment\";\n\nexport function Commit(props) {\n  const {commit} = props;\n\n  let title = commit.commit.message;\n  let end = title.indexOf(\"\\n\");\n  if (end !== -1) {\n    title = title.substring(0, end);\n  }\n\n  return (\n    <div className=\"bg-gray-700 py-3 px-3 border-blue-200 border-2 mb-1\">\n      <div className=\"text-l tracking-wide\tline-clamp-2\">\n        {title}\n      </div>\n      <div className=\"mt-1 text-blue-400 font-normal text-sm\">\n        {commit.commit.committer.name}\n        <span className=\"px-1 text-blue-200\">commited at </span>\n        <span className=\"text-sm  font-light text-blue-200\">\n          <Moment format=\"YYYY MMM DD\">\n            {commit.commit.committer.date}\n          </Moment>\n        </span>\n      </div>\n      <div className=\"text-sm flex-row justify-evenly mt-1\">\n        <span className=\" text-xs font-light text-gray-500\">\n          {commit.sha}\n        </span>\n      </div>\n    </div>\n  );\n}\n","import { selectCommits } from \"./githubViewerSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { loadNextCommits } from \"./githubViewerSlice\";\nimport { Commit } from \"./Commit\";\n\nexport function Commits() {\n  const commits = useSelector(selectCommits);\n  const dispatch = useDispatch();\n\n  if (commits === null) {\n    return (\n      <div className=\"p-10 min-h-full text-gray-800\">Select a repostitory</div>\n    );\n  }\n\n  return (\n    <div>\n      <div  className=\" my-3 mr-3 bg-gray-700 rounded-2xl border-top-1\">\n        <h2 className=\"text-2xl p-5 pb-2 text-blue-200\">Commits</h2>\n        <div className=\"bg-white\">\n          {commits.map((commit) => <Commit  key={commit.sha} commit={commit}/>)}\n        </div>\n      </div>\n        <div className=\"text-center\">\n      <button\n        className=\"px-4 rounded-lg button text-white font-bold p-4 uppercase  border\"\n        onClick={() => {\n          dispatch(loadNextCommits());\n        }}\n      >\n        Load more\n      </button>\n      </div>\n    </div>\n  );\n}\n","import { GoRepoForked, GoStar, GoCalendar } from \"react-icons/go\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectCurrentRepository,\n  setCurrentRepository,\n} from \"./githubViewerSlice\";\nimport Moment from \"react-moment\";\n\nexport function Repository(props) {\n  const { repo } = props;\n  const currentRepository = useSelector(selectCurrentRepository);\n  const dispatch = useDispatch();\n\n  return (\n    <div\n      className={`px-10 py-5 cursor-pointer hover:bg-yellow-400 text-gray-700\n        ${currentRepository === repo.name ? \"repo_list\" : \"\"}`}\n      onClick={() => {\n        dispatch(setCurrentRepository(repo.name));\n      }}\n    >\n      <div className=\"text-xl font-bold tracking-wide\t\">{repo.name}</div>\n      <div className=\"text-white font-normal text-sm\">\n        {repo.description}\n      </div>\n      <div className=\"text-sm text-gray-700 hover:flex-row justify-evenly mt-2 items-center\">\n      <span className=\"align-bottom\">\n          <GoStar className=\"icon inline-block text-sm mr-1\" />\n          {repo.stargazers_count}\n        </span>\n        <span className=\"font-semibold ml-2\"> {repo.language} </span>\n        <span className=\"ml-2 align-bottom\">\n          <GoRepoForked  className=\"icon inline-block\" />\n          {repo.forks}\n        </span>\n        <span className=\"ml-2 align-bottom\">\n          <GoCalendar className=\"icon inline-block mr-1 \" />\n          <Moment format=\"YYYY MMM DD\">{repo.created_at}</Moment>\n        </span>\n      </div>\n    </div>\n  );\n}\n","import { selectRepositories } from \"./githubViewerSlice\";\nimport { useSelector } from \"react-redux\";\nimport { Repository } from \"./Repository\";\n\nexport function Repositories() {\n  const repositories = useSelector(selectRepositories);\n\n  return (\n    <div className=\"rounded-xl  repo_list_bg m-3 shadow-lg drop-shadow\">\n      <h2 className=\"text-2xl m-5 mb-2 font-bold\">Repositories</h2>\n      <div className=\"divide-red-200 divide-y\">\n        {repositories.map((repo) => (\n          <Repository key={repo.id} repo={repo} />\n        ))}\n      </div>\n    </div>\n  );\n}\n","import { VscLoading } from 'react-icons/vsc';\n\nexport function Loading (){\n  return <div className=\"w-full h-full fixed top-0 left-0 bg-white opacity-75 z-50 flex justify-center items-center\">\n    <span className=\"text-gray-800 opacity-90\">\n      <VscLoading className=\"animate-spin w-20 h-20\"/>\n    </span>\n  </div>\n}\n","export function LoadingError (){\n  return <div className=\"w-full h-full fixed top-0 left-0 bg-white opacity-75 z-50 flex justify-center items-center\">\n    <span className=\"text-red-500 opacity-90\">\n      There was an error loading data\n    </span>\n  </div>\n}\n","import {\n  selectOrganization,\n  setOrganization,\n  selectLoading,\n  selectLoadingError,\n  setAccessToken\n} from \"./githubViewerSlice\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Commits } from \"./Commits\";\nimport { useEffect, useState } from \"react\";\nimport { Repositories } from \"./Repositories\";\nimport {Loading} from \"./Loading\";\nimport {LoadingError} from \"./LoadingError\";\n\n\nexport function GithubViewer() {\n  const organization = useSelector(selectOrganization);\n  const dispatch = useDispatch();\n\n  const [orgInput, setOrgInput] = useState(\"\");\n  const [tokenInput, setTokenInput] = useState(\"\");\n\n  const loading =  useSelector(selectLoading);\n  const loadingError =  useSelector(selectLoadingError);\n\n  useEffect(() => {\n    dispatch(setOrganization(\"netflix\"))\n  }, [dispatch]);\n\n  return (\n    <div>\n      {loading && <Loading/>}\n\n      {loadingError !== null && <LoadingError/>}\n\n      <div id=\"token_body\" className=\"py-1 px-4 flex justify-between items-center text-gray-500\">\n        <span className=\"p-2\">\n          Github allows only 60 unauthenticated requests per hour per IP. <br/> If you see errors\n          {\" \"}\n          <a href=\"https://github.com/settings/tokens/new\" className=\"underline text-gray-700\">create</a>\n          {\" \"}\n          and enter your\n          Github API token.\n\n        </span>\n        <span>\n          <form\n            className=\"flex\"\n            onSubmit={(event) => {\n              event.preventDefault();\n              dispatch(setAccessToken(tokenInput));\n              setTokenInput(\"\");\n            }}\n          >\n            <input\n              className=\"rounded-l-lg p-2 border-t mr-0 border-b border-l text-gray-800 border-gray-200 bg-white\"\n              placeholder=\"Github Access Token\"\n              value={tokenInput}\n              onChange={(event) => setTokenInput(event.target.value)}\n            />\n            <button className=\"button rounded-r-lg   text-white font-bold p-1 px-4 uppercase  border-t border-b border-r\">\n              Update\n            </button>\n          </form>\n        </span>\n      </div>\n\n      <div  className=\"bg-white  p-5 flex justify-between\">\n        <span  className=\"repo_name pl-4 font-semibold text-5xl\">\n          {organization?.name}\n        </span>\n\n        <span>\n          <form\n            className=\"flex\"\n            onSubmit={(event) => {\n              event.preventDefault();\n              dispatch(setOrganization(orgInput));\n            }}\n          >\n            <input\n              className=\"rounded-l-lg p-2 border-t mr-0 border-b border-l text-gray-800 border-gray-200 bg-white\"\n              placeholder=\"Organization\"\n              value={orgInput}\n              onChange={(event) => setOrgInput(event.target.value)}\n            />\n            <button className=\"button px-4 rounded-r-lg   text-white font-bold p-4 uppercase  border-t border-b border-r\">\n              GO\n            </button>\n          </form>\n        </span>\n      </div>\n\n      <div className=\"grid grid-cols-2 bg-white gap-0.5\">\n        <Repositories />\n        <Commits />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\nimport { GithubViewer } from './features/githubViewer/GithubViewer';\n\nfunction App() {\n  return <GithubViewer/>;\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport githubViewerReducer from '../features/githubViewer/githubViewerSlice';\n\nexport const store = configureStore({\n  reducer: {\n    githubViewer: githubViewerReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}